import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.concurrent.*;

public class PDFConverter {
    private static final String LIBREOFFICE_CMD = "libreoffice";
    private static final Set<String> SUPPORTED_FORMATS = Set.of("docx", "pptx", "xlsx", "png", "odt", "odp", "ods");
    
    // Semáforo para limitar instancias concurrentes de LibreOffice
    private static final Semaphore libreOfficeSemaphore = new Semaphore(4);
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("=== PDF Converter ===");
        System.out.println("1. Conversión individual");
        System.out.println("2. Análisis de rendimiento");
        System.out.println("3. Generar gráficas");
        System.out.print("Seleccione opción: ");
        
        int option = scanner.nextInt();
        scanner.nextLine();
        
        switch (option) {
            case 1:
                runSingleConversion(scanner);
                break;
            case 2:
                Benchmark.runPerformanceAnalysis();
                break;
            case 3:
                Graficas.generateReports();
                break;
            default:
                System.out.println("Opción inválida");
        }
        
        scanner.close();
    }
    
    private static void runSingleConversion(Scanner scanner) {
        System.out.print("Usar archivo de rutas? (y/n): ");
        String useFile = scanner.nextLine().trim().toLowerCase();
        
        List<String> inputFiles;
        
        if ("y".equals(useFile)) {
            inputFiles = FileManager.loadFilePaths();
        } else {
            System.out.print("Ingrese rutas de archivos (separadas por coma): ");
            String input = scanner.nextLine();
            String[] paths = input.split(",");
            inputFiles = Arrays.stream(paths)
                    .map(String::trim)
                    .filter(path -> !path.isEmpty())
                    .toList();
        }
        
        System.out.print("Número de hilos (Enter para 1): ");
        String threadsInput = scanner.nextLine().trim();
        int threads = threadsInput.isEmpty() ? 1 : Integer.parseInt(threadsInput);
        
        String outputDir = FileManager.getOutputDirectory();
        
        long startTime = System.currentTimeMillis();
        List<String> convertedFiles = convertToPDF(inputFiles, outputDir, threads);
        long endTime = System.currentTimeMillis();
        
        System.out.println("\n=== Resultados ===");
        System.out.println("Tiempo total: " + (endTime - startTime) + " ms");
        System.out.println("Archivos convertidos exitosamente: " + convertedFiles.size() + "/" + inputFiles.size());
        convertedFiles.forEach(System.out::println);
    }
    
    public static List<String> convertToPDF(List<String> inputFiles, String outputDir, int threadCount) {
        List<String> convertedFiles = Collections.synchronizedList(new ArrayList<>());
        ExecutorService executor = Executors.newFixedThreadPool(threadCount);
        
        try {
            Files.createDirectories(Paths.get(outputDir));
            
            List<Future<String>> futures = new ArrayList<>();
            
            for (String inputFile : inputFiles) {
                Future<String> future = executor.submit(() -> {
                    try {
                        return convertSingleFile(inputFile, outputDir);
                    } catch (Exception e) {
                        System.err.println("Error convirtiendo " + inputFile + ": " + e.getMessage());
                        return null;
                    }
                });
                futures.add(future);
            }
            
            for (Future<String> future : futures) {
                try {
                    String result = future.get();
                    if (result != null) {
                        convertedFiles.add(result);
                    }
                } catch (Exception e) {
                    System.err.println("Error obteniendo resultado: " + e.getMessage());
                }
            }
            
        } catch (IOException e) {
            System.err.println("Error creando directorio de salida: " + e.getMessage());
        } finally {
            executor.shutdown();
            try {
                if (!executor.awaitTermination(60, TimeUnit.SECONDS)) {
                    executor.shutdownNow();
                }
            } catch (InterruptedException e) {
                executor.shutdownNow();
                Thread.currentThread().interrupt();
            }
        }
        
        return convertedFiles;
    }
    
    private static String convertSingleFile(String inputFile, String outputDir) throws Exception {
        Path inputPath = Paths.get(inputFile);
        
        if (!Files.exists(inputPath)) {
            throw new FileNotFoundException("Archivo no encontrado: " + inputFile);
        }
        
        if (!Files.isReadable(inputPath)) {
            throw new IOException("No se puede leer el archivo: " + inputFile);
        }
        
        String extension = getFileExtension(inputPath.getFileName().toString()).toLowerCase();
        if (!SUPPORTED_FORMATS.contains(extension)) {
            throw new UnsupportedOperationException("Formato no soportado: " + extension);
        }
        
        String outputFileName = inputPath.getFileName().toString();
        int lastDot = outputFileName.lastIndexOf('.');
        if (lastDot > 0) {
            outputFileName = outputFileName.substring(0, lastDot);
        }
        outputFileName += ".pdf";
        
        Path outputPath = Paths.get(outputDir, outputFileName);
        
        // Eliminar archivo de salida si existe
        if (Files.exists(outputPath)) {
            Files.delete(outputPath);
        }
        
        // Limitar instancias concurrentes de LibreOffice
        boolean acquired = libreOfficeSemaphore.tryAcquire(15, TimeUnit.SECONDS);
        if (!acquired) {
            throw new RuntimeException("No se pudo obtener acceso a LibreOffice - timeout");
        }
        
        try {
            // Crear directorio temporal único para evitar conflictos
            String tempDirName = "temp_" + System.currentTimeMillis() + "_" + Thread.currentThread().getId();
            Path tempDir = Paths.get(outputDir, tempDirName);
            Files.createDirectories(tempDir);
            
            try {
                ProcessBuilder pb = new ProcessBuilder(
                    LIBREOFFICE_CMD,
                    "--headless",
                    "--invisible",
                    "--nodefault",
                    "--nolockcheck",
                    "--nologo",
                    "--norestore",
                    "--convert-to", "pdf",
                    "--outdir", tempDir.toString(),
                    inputPath.toAbsolutePath().toString()
                );
                
                // Configurar entorno para evitar conflictos
                Map<String, String> env = pb.environment();
                env.put("HOME", tempDir.toString());
                env.put("TMPDIR", tempDir.toString());
                env.put("XDG_CONFIG_HOME", tempDir.toString());
                env.put("XDG_DATA_HOME", tempDir.toString());
                
                pb.redirectErrorStream(true);
                
                Process process = pb.start();
                
                // Leer salida para diagnóstico
                StringBuilder output = new StringBuilder();
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        output.append(line).append("\n");
                    }
                }
                
                boolean finished = process.waitFor(90, TimeUnit.SECONDS);
                if (!finished) {
                    process.destroyForcibly();
                    throw new RuntimeException("Timeout en conversión de: " + inputFile);
                }
                
                int exitCode = process.exitValue();
                if (exitCode != 0) {
                    throw new RuntimeException("Error en LibreOffice (código " + exitCode + "): " + output.toString());
                }
                
                // Buscar archivo PDF generado en directorio temporal
                Path tempOutputPath = tempDir.resolve(outputFileName);
                if (!Files.exists(tempOutputPath)) {
                    // Buscar cualquier PDF en el directorio temporal
                    try (var stream = Files.list(tempDir)) {
                        Optional<Path> pdfFile = stream
                            .filter(p -> p.toString().toLowerCase().endsWith(".pdf"))
                            .findFirst();
                        
                        if (pdfFile.isPresent()) {
                            tempOutputPath = pdfFile.get();
                        } else {
                            throw new RuntimeException("Archivo PDF no fue creado. Salida: " + output.toString());
                        }
                    }
                }
                
                // Mover archivo al directorio final
                Files.move(tempOutputPath, outputPath, StandardCopyOption.REPLACE_EXISTING);
                
                return outputPath.toAbsolutePath().toString();
                
            } finally {
                // Limpiar directorio temporal
                try {
                    Files.walk(tempDir)
                        .sorted(Comparator.reverseOrder())
                        .forEach(path -> {
                            try {
                                Files.deleteIfExists(path);
                            } catch (IOException e) {
                                // Ignorar errores de limpieza
                            }
                        });
                } catch (IOException e) {
                    // Ignorar errores de limpieza
                }
            }
            
        } finally {
            libreOfficeSemaphore.release();
        }
    }
    
    private static String getFileExtension(String fileName) {
        int lastDot = fileName.lastIndexOf('.');
        return lastDot > 0 ? fileName.substring(lastDot + 1) : "";
    }
}